# Default values for artifactory-ha.
# This is a YAML-formatted file.
# Beware when changing values here. You should know what you are doing!
# Access the values with {{ .Values.key.subkey }}

repo: kintohub

common:
  ssl:
    enabled: true

    issuer:
      email: devaccounts@kintohub.com
      server: https://acme-v02.api.letsencrypt.org/directory
      solver:
        cloudflare:
          email: devaccounts@kintohub.com
          cloudflareApiToken: j5Z0t1sBXDzGiOlUNtHmr2POyXUhatdDD_uk8XhC ## https://cert-manager.io/docs/configuration/acme/dns01/cloudflare/#api-tokens

    certificate:
      dnsName: "*.oss.kintohub.net"

core:
  replicas: 1

  image: kinto-core:latest
  imagePullPolicy: Always

  grpc:
    port: 8080

  grpcWeb:
    port: 8090

  ingress:
    enabled: true
    grpc:
      host: core.oss.kintohub.net
    grpcWeb:
      host: core-web.oss.kintohub.net

  env:
    LOG_LEVEL: DEBUG
    KINTO_DOMAIN: "oss.kintohub.net"
  
  resources: {}

builder:
  replicas: 1

  image: kinto-builder
  imagePullPolicy: Always
  tag: latest

  port: 8080

  env:
    LOG_LEVEL: DEBUG

    IMAGE_REGISTRY_HOST: eu.gcr.io/kinto-development

    POLL_LOGS_INTERVAL_SECONDS: 1
    USER_FRIENDLY_BUILD_LOGS_ENABLED: false 

    WORKFLOW_TIMEOUT: 1800

    ARGO_WORKFLOW_TTL_SECONDS: 120
    ARGO_WORKFLOW_MINIO_HOST: kinto-minio:9000
    ARGO_WORKFLOW_MINIO_BUCKET: argo-artifacts
    ARGO_WORKFLOW_IMAGE_PULL_POLICY: IfNotPresent
    ARGO_WORKFLOW_VOLUME_SIZE: 1Gi
    ARGO_WORKFLOW_MEMORY_LIMIT: 4Gi
    ARGO_WORKFLOW_CPU_LIMIT: 2

  resources: {}

  workflow:
    mainImage: kinto-workflow-main
    cliImage: kinto-workflow-cli

    docker:
      registry: eu.gcr.io
      email: devaccounts@kintohub.com
      username: _json_key
      password: '{
  "type": "service_account",
  "project_id": "kinto-development",
  "private_key_id": "9172aa92e5db9ee5f1e4301b91d73d461e1ee03f",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDNLraxpMZjzFBm\niruFxuxeD6kJ99pvm2Zg77Sl52VQ7ftzKWbivcW4ljQjaktMHzqQm0mRRnn6127+\nLXiBUlI53BGPJTZ0mGxlMRmOsuYfj3Mqstf6FCTNQVYMmlu/9gkpzWev3Is1GXEC\nxXI/1KWwXPnlpdOl19lyPuSBS+fmEDjTnZNHFJDCFmJkL/l/wkn2qvu2jp0GSzb4\nIB6lbMB0XczYnFx8wVLzA/sZ78x0zWxyw37Yx4en5pUbmgWUcympK0Oce/4XoxDp\nK01pY3FzMGSQrrvSIcacHVY79PI27sID7py5BLp/exxNwQ66qLtBIu9Gfj/WFpJp\n2n5abd4/AgMBAAECggEACCPaS6Hl3P+2ENtgJSaHKhQk+KhEmjjoDuBzokFT26oV\nV7REyKoOtgv/dYg6BIMYp7QBbyoEnNb/KEZViYvihzkb2Tn4txd09W7FPMwMJSRj\nxUXjG6DA9QOqjkVxbmQsaOQlQOzW+PxRZ3K93ZpqGF0X7OxvQR0XG1kzZ43DXXUl\nFlSEAdcPMkIMpy9y0SWthPpguGo92Qlg8EejdVzKgmULnk0L2U4GVBdXr0f2RC3C\nyfClq2g69hCHvXyr1cJoHPB5MCFJbDnhnxCyqcJXlN60PV2LtBVzWLVnhTITuAuW\npz4uXqTsOuSnqb0dueshov2oU0oDOAeYjUwmqwR4AQKBgQDxbr2x5/Hl414Sm+s+\niAmvJm5Ba33J8X8B5hmEnFN5/bu1ycw7IgIdl9coNTz6RqNRMI0s1UNWCh4OARuJ\n73TXkHMkcTsCgpKNwGoEiWpTAEVPF4OmOwzu+0xSCgia0g1xTlw7dgtLku6VDln7\nwuBmTeiMq+quo3l/Bf1ZS7a+gQKBgQDZkAovg9riqpwP246Thj6kyrvF1Wht7xCK\nw/zIBFkXSDQCP5WhH3xKal7dRNTu6tBpRQZPQGAe4S5bMB13d3r8TW/WpFCVbVrE\nccg0JykJQkALns0+Y8SNxDBN+2pIOAzEOKPxuM3TxEocR5jAWvKEZYNQZMh9TefZ\naCB+76+8vwKBgQDxQ1v3M7TsqQhyCjPL+j/LMtlNMLC0JEtqR1nKxjk5GBEDudQI\nZ5S7o+fTe1gjNoGv+ZeqbLdsfJHKJtsxPQSDAgu+KBTzDi6LzvNi8zs4FHYucm4R\nqMLk8mUzOmmc5Tmft9G9bdodvIgEliHfz79VHJe+M3JC8IPSJtck69+DgQKBgEvc\nkfCnhXdsDibpY/nE4asMlhURqOxMY/Q/CrGj8nzPzHLMQRyBohFArftxuN3mOu26\nB80yoVGjK0rYqC20F8pKJikt+ntgOjotgqXM0d5Mn5Btuxt6JltYgY9vj0vHX4w8\nQ85RplOlKkJaJMVN8SqBSxyJR++JbsK8MDiS0zB5AoGAEhK+a/o0v3TIs3nnwWlN\nadFUTRj5QO6jsnhnw+Y/BzJ8NrBj3NFkovk1fTMBiQJCSICNc5KRbUNYpHxWNHK/\n9Q2RK0ZTJnkH30wNzfwksoOC6GJYYQ9UOPuN4d3D5BBD0qKdXOcffX1tKO6BmXL0\nRn75q+u865rcSP9jn8DfHRY=\n-----END PRIVATE KEY-----\n",
  "client_email": "temporary-gcs-admin@kinto-development.iam.gserviceaccount.com",
  "client_id": "106217820440723117186",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/temporary-gcs-admin%40kinto-development.iam.gserviceaccount.com"
}'

frontend:
  replicas: 1

  image: kinto-frontend:latest
  imagePullPolicy: Always

  port: 5000

  resources: {}

  ingress:
    enabled: true
    host: oss.kintohub.net

  env:
    REACT_APP_GRPC_WEB_HTTPS_ENABLED: true
    REACT_APP_SLEEP_MODE_TTL_MINUTES: "10"
    REACT_APP_LOCAL_STORAGE_VERSION: "20201124153800"

nginx-ingress-controller:
  service:
    ##  PR : https://github.com/kintohub/kinto-kube-infra/pull/65
    ##  This is for preserving client IP address
    ##
    ##  Plz take extra care of the information below.
    ##
    ##  The proper way to fix that should have been to enable "proxy protocol" on the nginx ingress controller.
    ##  Ref: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#use-proxy-protocol
    ##
    ##  However, this is not supported by GCP/GKE. Ref: https://kubernetes.github.io/ingress-nginx/deploy/#gce-gke
    ##  (It is however supported by AWS, DO, maybe Azure? - anyway, quite surprising)
    ##
    ##  So I ended up setting externalTrafficPolicy of our nginx ingress ingress service to Local instead of Cluster.
    ##  Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    ##  However, it has the downside of not balancing the traffic very well. Indeed the LB will still target multiple nodes, but they will
    ##  not take into consideration the number of pods per nodes.
    ##  See following video: https://www.youtube.com/watch?v=y2bhV81MfKQ&feature=youtu.be&t=1823
    ##  As u can see, this downside will mostly be for multiple pods of the same deployment per node. And our user don't have this case yet,
    ##  they barely use autoscaling.
    ##  So I suggest we merge this PR and we will see in the future if issue arises. We will be able then to maybe deploy another ingress 
    ##  controller with better spreading.
    externalTrafficPolicy: Local

  replicaCount: 1
  minAvailable: 1

  config:
    proxy-body-size: "50m"

  resources: {}

  scope:
    enabled: false
  
  extraArgs:
    default-ssl-certificate: "kintohub/common-wildcard-cert" ## /!\ CHANGE THIS IF NAMESPACE != "kintohub"

  defaultBackend:
    replicaCount: 1
    minAvailable: 1

    resources: {}

proxless:
  enabled: true

  port: 80

  image:
    repository: bappr/proxless
    tag: v0.1.7
    pullPolicy: Always

  logLevel: DEBUG
  replicas: 1 ## Uncomment `REDIS_URL` if > 1 and change `redis.enabled` to `true`

  resources: {}

  env:
    SERVERLESS_TTL_SECONDS: 30 # Time in seconds proxless waits before scaling down the app
    DEPLOYMENT_READINESS_TIMEOUT_SECONDS: 30 # Time in seconds proxless waits for the deployment to be ready when scaling up the app
    SCALE_DOWN_CHECK_INTERVAL_SECONDS: 3000 # The downscaler check the deployment every N seconds
    SERVICES_INFORMER_RESYNC_INTERVAL_SECONDS: 3000 # All services will be resynced after N seconds
    # REDIS_URL: kinto-redis-master:6379 # Configured to use redis below

  redis:
    enabled: false

minio:
  accessKey: "AKIAIOSFODNN7EXAMPLE"
  secretKey: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"

  persistence:
    enabled: true
    size: 10Gi

  resources:
    requests: null ## https://github.com/helm/helm/issues/1966

  defaultBucket:
    enabled: true
    name: argo-artifacts

  environment:
    MINIO_API_READY_DEADLINE: "5s"
    MINIO_BROWSER: "on"

argo:
  enabled: true

  installCRD: true

  singleNamespace: true

  controller:
    resources: {}

  server:
    resources: {}

  useDefaultArtifactRepo: true
  artifactRepository:
    archiveLogs: true
    s3:
      accessKeySecret:
        name: kinto-minio
        key: accesskey
      secretKeySecret:
        name: kinto-minio
        key: secretkey
      insecure: true
      bucket: argo-artifacts ## must be created before
      endpoint: kinto-minio:9000
    minio:
      install: false

cert-manager:
  enabled: true

  resources: {}

  global:
    # Set the verbosity of cert-manager. Range of 0 - 6 with 6 being the most verbose.
    logLevel: 2

  installCRDs: true

  replicaCount: 1

  webhook:
    replicaCount: 1

    resources: {}

  cainjector:
    resources: {}